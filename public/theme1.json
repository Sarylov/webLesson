{
  "HTML": {
    "icon": "img/icon/html.png",
    "Предисловие": [
      "Веб(web) - это одна из сфер программирования, которая очень быстро развивается, и безостановочно растет во все стороны. Уже сейчас возможно написать программу для windows, линукс, mac и даже андроид устройств, пользуясь инструментами веба. Кстати, примером этому факту может послужить программа, в которой вы сейчас находитесь.",
      "img/1/1.1.png",
      "Веб может показаться необъятным. Html, js, css, scss, jQuery, bootstrap и прочих методологии с Фреймворками и библиотеками, не говоря уже о паттернах программирования, работе с сервером и базой данных. Видя такие слова можно потерять веру в свою обучаемость и просто сдаться. Но не стоит забывать, что тяжело только по началу. Все переплетено, и понимая одну технологию можно догадаться как с ней работает другая. Как в пазле, легче его заканчивать, нежели начинать собирать.",
      "И все же необходимо четко делить сайт на 2 мира, что работают чаще всего вместе, но могут разрабатывается отдельно друг от друга. Это frontend и backend. Frontend это то, что по итогу видит пользователь: странички, интерфейс, анимации и т. д. То есть, это все что касается оформления сайта. Backend это то, что делает сайт за кулисами: отправка данных, поддержка сервера, обработка запросов и т. п. Фронт (frontend) гораздо проще для понимания, ведь это по сути визуал, который все мы уже видели и щупали на любых сайтах.",
      "И так давайте упростим задачу, с изучения полного цикла создания сложных сайтов, до создания небольшой странички 'визитки'. То есть только фронт. Для этого познакомимся с 3 китами веба: html, css и javascript. Эти технологии есть на всех сегодняшних сайтах и являются необходимой базой для создания самои простой веб странички. "
    ],
    "Html": [
      "img/1/1.2.jpg",
      "HTML (от англ. HyperText Markup Language — «язык гипертекстовой разметки») — стандартизированный язык разметки документов во Всемирной паутине <s>",
      "Почему именно 3 кита (html, css, js)? Все потому что каждый инструмент выполняет свою функцию. Html нам нужен для обозначения элементов на сайте. Откройте любой сайт и посмотрите из чего он состоит. Из ссылок, картинок, текcта и так далее. Все это элементы страницы.",
      "Прямо сейчас создайте у себя на компьютере файл любого типа, например txt, Это не принципиально важно, все равно мы поменяем это расширение на html. После того как мы его поменяли, можно заметить что иконка документа сменилась на иконку браузера. Поздравляю эта ваш первый сайт. Кликните по ней 2 раза и отроется браузер с вашей страницей. Как видите она пуста. На ней нет элементов ссылок, картинок и текста, потому что сам файл пуст. Сверните браузер откройте файл с помощью блокнота. Напишите в нем что угодно, например 'hello world'. Теперь перейдите в браузер и обновите страницу. Чудеса правда? Вывод в том что с помощью html можно создавать содержимое для сайта."
    ],
    "Теги и атрибуты": [
      "Текст это конечно хорошо но хотелось бы чего ни будь посерьезнее, например ссылку. То есть нам нужен другой элемент. Как же нам сказать браузеру, что вместо текста нам нужна ссылка? Тут и нужны теги.",
      "HTML-теги — основа языка HTML. Теги используются для разграничения начала и конца элементов в разметке.<s>",
      "Выглядит это как-то так",
      "img/1/1.3.jpg big",
      "Вы все правильно поняли. Тег 'a' говорит браузеру: все что находиться между '< a>' и  '</ a>' является ссылкой. это понятно, но что за 'href' ? Это называется  атрибут, с помощью которого браузер понимает куда надо переходить.",
      "<s> HTML-атрибуты сообщают браузеру, каким образом должен отображаться тот или иной элемент страницы. Атрибуты позволяют сделать более разнообразными внешний вид информации, добавляемой с помощью одинаковых тегов.",
      "Теги бывают парными и одиночными. На рисунке показаны парные теги, то есть, которые открывется и закрывается (например, выше описанная ссылка). Атрибуты пишутся в открывающем теге.",
      "Тегов очень много и нет смысла знать все. Достаточно знать всего несколько, которые наиболее часто используются. К таким относятся тег ссылки, тег картинки, тег абзаца, тег загаловка. Для начала столько тегов вам будет достаточно. Давайте разберем каждый из них.",
      "Тег <img> предназначен для отображения на веб-странице изображений в графическом формате GIF, JPEG или PNG и является примером одиночного тега. Адрес файла с картинкой задаётся через атрибут src. Если необходимо, то рисунок можно сделать ссылкой на другой файл, поместив тег <img> в контейнер <a>. При этом вокруг изображения отображается рамка, которую можно убрать, добавив атрибут border='0' в тег <img>. Скачайте какую-нибудь  картинку и поместите ее в ту же папку, где у вас находится html файл. И напишите следующий код: <img src='nazvanieKartinki.jpg'  / >'. Сохраните изменения в файле и обновите страницу(делайте так после любого изменения в файле, чтобы увидеть результат). теперь на странице должна отобразится картинка.",
      "Тег <p> Определяет текстовый абзац. текст внутри этого тега всегда начинается с новой строки. Самый простой тег, не имеющий объязательных атрибутов. Можете написать несколько раз: <p>text1</p> . Часто нужен для отобажения статей, новостей и прочих блоков с текстовой информациеи.",
      "HTML предлагает шесть заголовков разного уровня, которые показывают относительную важность секции, расположенной после заголовка. Так, тег <h1> представляет собой наиболее важный заголовок первого уровня, а тег <h6> служит для обозначения заголовка шестого уровня и является наименее значительным. По умолчанию, заголовок первого уровня отображается самым крупным шрифтом жирного начертания, заголовки последующего уровня по размеру меньше. Теги <h1>,...,<h6> относятся к блочным элементам, они всегда начинаются с новой строки, а после них другие элементы отображаются на следующей строке. Кроме того, перед заголовком и после него добавляется пустое пространство. Можете написать : <h1>title</h1>. Попробуйте поменять 1 на 2, а потом на 3 и так до 6."
    ],
    "Коментарии": [
      "Когда вы создаете большие сайты, то со временем можете забыть, что именно делает та или иная часть кода страницы. И сколь хорошо бы вы ни знали код страницы на момент его написания, если вам придется вернуться к нему спустя какое-то время (или кому-либо еще понадобится просмотреть его), то именно комментарии помогут быстро разобраться с кодом. Комментарии могут располагаться в любом месте страницы, потому что не отображаются браузером. Информация в комментариях не имеет специального значения и не воспринимается как НТМL-код. Комментарии используются чаще для пояснений, например коrдa над кодом работают несколько человек или когдa необходимо временно исключить некий фрагмент кода из обработки, не удаляя ero совсем, то можно заключить такой фрагмент в комментарий, после чего он будет проигнорирован браузером.",
      "Комментарии в HTML имеют следующий синтаксис:",
      "img/1/1.4.jpg big ",
      "Восклицательный знак после утловой скобки означает, что это уже не НТМL-код. Текст, заключенный между тегами <!-- и --> , не отображается веб-браузером. Заметьте, что это нестандартная пара тегов, так как открывающий тег не имеет закрывающей угловой скобки, а в закрывающем теге отсутствует открывающая угловая скобка."
    ],
    "Блочные и встроенные элементы": [
      "Очевидно вы уже заметили, что элементы заголовков <h1> - <h6> и абзацев <p> начинаются с новой строки. Это происходит потому, что они являются примерами блочных элементов различных уровней. Браузеры рассматривают блочные элементы так, словно они заключены в маленькие прямоугольные области – блоки, из которых складываются страницы. По умолчанию каждый блочный элемент начинается с новой строки и, как правило, ограничен сверху и снизу пустыми строками. В следующем примере границы блочных элементов выделены зеленым цветом:",
      "img/1/1.5.jpg ",
      "Обратите внимание как выглядит текст, который мы пометили как курсивный (еm). Он не начинается с новой строки, а остается в составе абзаца. Это происходит потому, что элемент <em> является встроенным или строчным. Встроенные элементы не начинаются с новой строки, а находятся в составе блочных. Встроенным элементам достаточно лишь той ширины, которую физически занимают все элементы, находящиеся в них.",
      "Разница между блочными и строчными элементами следующая: Строчные элементы не могут хранить блочные элементы, а могут содержать только данные или другие строчные элементы; Блочные элементы могут содержать другие блочные элементы, строчные элементы, а также данные; Блочные элементы всегда начинаются с новой строки и, как правило, ограничены сверху и снизу пустыми строками; Блочные элементы занимают всю ширину родительского элемента, например, окна браузера; Строчные элементы занимают ширину равную их содержимому плюс значения отступов, полей и границ.",
      "Примеры блочных элементов: <div>, <h1> - <h6>, <p>, <form>",
      "Примеры строчных элементов: <span>, <a>, <img>"
    ],
    "Общие элементы <div> и <span>": [
      "<s> Элемент <div> — это общий блочный элемент, который применяется для группировки одного или нескольких блочных элементов. Он указывает, что сгруппированные вместе элементы образуют некую смысловую единицу и должны рассматриваться, например таблицей стилей CSS, как одна единица. Используя элемент <div> вместе с таблицами стилей CSS, вы сможете придать одинаковое стилевое оформление для всех элементов, помещенных в контейнер <div>.",
      "Итак, тег <div> служит для того, чтобы: Применять какие-либо настройки к отдельному информационному блоку на сайте; быть контейнером для текста, изображений и других элементов HTML-документа.",
      "<s> Элемент <span> — это общий встроенный элемент, который используется для встроенных элементов, которые не вводят переводов строк. Элемент <span> может содержать только текст и другие встроенные элементы (вы не можете поместить туда блочные элементы: заголовки, списки, элементы группировки контента и т. д.).",
      "Так как элемент <span> — строчный, то есть не требует для себя всей ширины окна браузера, то ему достаточно лишь той ширины, которую физически занимают все элементы, находящиеся в нем. Поэтому элемент <span> часто используется для форматирования отдельных слов внутри абзаца.",
      "Пример использование элементов:",
      "img/1/1.6.jpg big",
      "img/1/1.7.jpg big"
    ],
    "Структура HTML-документа": [
      "Как театр начинается с вешалки, так и любой HTML-документ начинается с базовой структуры. Она включает в себя теги, которые есть в любом HTML-файле. Эти теги и служебная информация нужны браузеру для корректного отображения информации. Взглянем на базовую структуру любого HTML-документа:",
      "img/1/1.8.jpg big",
      "Сразу хочу вас предупредить, что при создании html файла, программисты не прописывают всю структуру заново, так как это давольно нудно. Это дейсвие уже давно автоматизировали, переложив ответственность за это с хрупких плеч прогрммиста на IDE. Так что эту стурктуру не стоит постоянно держать в голове с целью точного воспроизведения в любой момент, а лишь иметь ввиду, что где находится.",
      "Первая конструкция в любом HTML-документе — элемент DOCTYPE. Просто указывает браузеру тип документа, а имено на html.",
      "Тег <html></html> является основой основ. Именно внутри него располагается вся информация. Благодаря этому тегу браузер понимает, где начинается контент, который необходимо обработать как HTML.",
      "Важной частью тега html является наличие атрибута lang. В нём указывается язык, на котором отображается веб-страница. С помощью этого атрибута браузеры могут корректно считать множество специфичных символов, которые присутствуют в разных языках. Помимо этого, атрибут lang начинает использоваться и в CSS, с которым вы познакомитесь в следующих уроках. В новых стандартах CSS появляются свойства, которые опираются на данный атрибут. Например, позволяют корректно переводить слова в тексте. В качестве значения атрибут lang принимает знакомые всем сокращения языков. Для русского — ru, для английского — en, для немецкого — de.",
      "Тег head служит для хранения служебной информации. Здесь возможны самые разные сочетания тегов, которые подсказывают браузеру название страницы, описание, ключевые слова и так далее. Такая информация называется метаинформацией. В современном вебе она отвечает не только за служебную информацию для браузера, но и активно используется при продвижении сайта. Поисковые системы считывают всю эту информацию и на основе множества алгоритмов определяют место сайта при разных поисковых запросах. Любые данные, которые указаны внутри тега head, не видны при отображении страницы в браузере. Это значит, что нет необходимости располагать там информацию, которая предназначена для отображения. Именно в этом теге чаще всего подключаются css стили и шрифты, но об этом чуть позже. Не забивайте голову занчением тега meta(он все равно будет писаться автоматически самой IDE). Содержимое title будет отображаться сдесь:",
      "img/1/1.9.jpg big",
      "После тега head в документе указывается парный тег <body></body>, который является «телом» всей страницы. Именно здесь размещается вся информация, которая будет выведена на странице.",
      "img/1/1.10.jpg big",
      "То есть это та часть документа, с которой мы большую часть времени будем работать. Сдесь пишуться все таги для формирования элементов страницы и подключаются скрипты. Как подключаются скрипты мы разберем позже в разделе про js.",
      "Согласно структуре, простейшая страница будет выглядеть так:",
      "img/1/1.11.jpg big"
    ],

    "HTML Мета-теги": [
      "Мета-теги — это необязательные атрибуты, размещенные в заголовке страницы, между тегами <head> и </head>, которые никак не отображаются браузером (за исключением содержимого тега <title>). Мета-теги могут содержать описание html-страницы, ключевые слова к ней, информацию об авторе, управляющие команды для браузера и поисковых роботов, а также прочую служебную информацию, не предназначенную для посетителей. <s>",
      "Мета-теги для сайта играют очень важную роль. Их добавление в html-документ могут существенно помочь сайту в его жизни.",
      "Мета-теги можно разделить на две основные группы — это NAME и HTTP-EQUIV. Группа NAME отвечает за текстовую информацию о веб-документе, его авторе, а также — формирует рекомендации для поисковых роботов. Мета-теги, относящиеся к группе HTTP-EQUIV фактически эквивалентны гипертекстовым заголовкам, они формируют заголовок веб-страницы и определяют его обработку, а также управляют действиями браузеров и используются для формирования информации, выдаваемой обычными заголовками. Элемент meta принимает следующие атрибуты: content, http-equiv, name, charset и scheme.",
      "На данный момент, во время обучения, я бы не советовал сильно над этим заморачиваться. Просто имейте в виду, что это такое."
    ],

    "Идентификаторы и классы": [
      "Каждый НТМL-элемент может иметь атрибут id. Он предназначен для идентификации какого-либо конкретного тега. В пределах всей HTML-страницы должен существовать только один тег с определенным значением атрибута id. Наличие нескольких элементов с одинаковым значением id не допускается и может привести к ошибке. Значение атрибута id может состоять из букв латинского алфавита, цифр, знака подчеркивания и дефиса. Причем значение атрибута может начинаться с латинской буквы или со знака подчеркивания (но не с цифры или другого символа). Кроме того, значения атрибута id чувствительны к регистру. Атрибут id называют глобальным, поскольку он может быть использован с любыми НТМL-элементами.",
      "Присваивание id элементу:",
      "img/1/1.12.jpg big",
      "Классы используются для классификации элементов по общим группам, поэтому в отличие от атрибута id, множеству элементов может быть присвоено общее имя класса. Присваивая элементам имя одного класса, вы можете применить стили ко всем таким элементам одновременно с помощью единственного правила стилей. Чтобы сделать это, следует воспользоваться атрибутом class. Его значение должно описывать, к какому классу принадлежит элемент.",
      "Присваивание класса элементу:",
      "img/1/1.13.jpg big",
      "Если после прочтения данного раздела вам все еще не понятно зачем это и как использовать, то не расстраивайтесь. Гораздо проще понять, как это работает на практике. У вас будет такая возможность, когда мы перейдем к css."
    ],

    "Абсолютный и относительный путь": [
      "При разработке сайта часто приходится прописывать пути к файлам, ссылки на документы, страницы. В книгах по компьютерным технологиям можно часто встретить употребление терминов абсолютного и относительного пути к файлам. Часто автор не разъясняет, что означает тот или иной путь. Читатель, соответственно, путается, когда автор в последствии говорит об использовании абсолютного и(или) относительного пути. Допустим, у Вас есть сайт и Вам нужно создать гиперссылку(ссылку) на одну из страниц сайта. Здесь нужно выбрать какой использовать тип пути: относительный или абсолютный.",
      "Когда ссылка представляет из себя полный URL файла или страницы, это и есть абсолютный путь. При этом в адресе должен присутствовать используемый протокол. Например, http://www.uamedwed.com <s>",
      "В основном абсолютный путь используется, тогда, когда нужно сослаться на другой сайт. Иными словами если Вы хотите отправить посетителя на другой сайт, то нужно использовать абсолютный путь. Хотя, такой путь можно использовать и на собственном сайте. Но многие придерживаются того, что ссылки внутри сайта должны быть относительными.",
      "Относительный путь описывает путь к указанному документу относительно текущего. <s>",
      "Относительные пути используются гораздо чаще чем абсолютные пути. В основном относительный путь указывается тогда, когда Вам нужно отправить посетителя на другую страницу Вашего сайта, или вставить объект (например изображение) на одной из страниц. При этом использование относительно пути вполне оправдано.",
      "Именно путь относительно документа используется чаще всего. Такие ссылки ещё называются локальными. В основном такой путь используется тогда, когда текущий и связанный документ(страница) находятся в одной директории. Если переместить документ в другую директорию, то путь(ссылку) придётся менять. Хотя можно ссылаться и на документы(страницы) из других директорий. Для этого путь прописывается от текущего документа до целевого документа(страницы). При этом путь относительно документа должен задаваться в зависимости от структуры директорий. Возьмём к примеру простейшую структуру статического сайта.",
      "img/1/1.14.jpg small",
      "Предположим, что каждое изображение в каталоге images нужно вставить в соответствующие страницы home.html, products.html, contact.html. Для того что бы вставить изображение к примеру на страницу «home.html», нужно прописать путь, где расположено изображение. Если использовать путь относительно документа, то нужно будет прописать в коде страницы следующее:",
      "<img src='images/home.png'>",
      "Представим ситуацию, когда страница products.html, будет располагаться не в корневой директории сайта(как это было в предыдущем примере), а в подкаталоге. Теперь необходимо вставить изображение, в файл products.html, который находится, глубже чем корневая директория сайта.",
      "img/1/1.15.jpg small",
      "Для того, что бы вставить изображение в файл products.html нужно вернуться в корневую директорию. После чего, можно использовать уже известный путь, о котором говорилось чуть выше.",
      "<img src='../images/products.png'>",
      "Как видно из приведённого выше кода, к пути теперь добавилось следующее: ../. Как раз эта последовательность символов ../ и служит для перехода на одну директорию(уровень) выше в иерархии каталогов. Путь в вышеприведённом коде можно прочесть так: «Перейти на один каталог выше(назад), зайти в директорию images и взять от туда файл products.png«."
    ],

    "Итог": [
      "И так на данный момент мы знаем основные теги для создания базовых элементов страницы. Так же мы знаем структуру html документа. Еще мы примерно представляем себе, что такое мета теги, блочные элементы, идентификаторы и классы. Это далеко не все что можно знать об html, но этого определенно хватит для создания своей первой страницы, которую позже можно будет застилизовать в css. То есть не стоит забывать, что html это лишь часть веб разработки, не стоит сильно углублятся в изучение этой технологии, на данном этапе обучения. Сейчас, когда вы новичок, вам нужно изучать 'в ширь' а не 'в глубь'. Вам нужно стремиться к умению сверстать веб сайт по макету, со всеми менюшками, секциями, подвалами и шапками.",
      "Прямо сейчас я крайне рекомендую скачать редактор кода visual studio code. Он бесплатный, мало весит, имеет встроенный Emmet (привыкайте гуглить непонятные слова), в нем довольно просто устанавливать плагины и он имеет поддержку русского языка. ",
      "https://www.youtube.com/watch?v=Y4ezhxE7HPw",
      "После того как вы освоитесь в данной IDE, создайте файл index.html и откройте его в vs code. Нажмите на восклицательный знак, а после на tab. Создайте страницу с заголовком, блоком с текстом и ссылками, а внизу разместите картинку. Не стоит пренебрегать практикой, по большей части это и есть процесс обучения.",
      "А для закрепления теоретических знаний, предлагаю вам пройти тест, после которого можно приступить к следующему этапу, к css. "
    ],

    "html <test>": {
      "qsn1": {
        "qsn": "1. Как оформляется комментарий в HTML?",
        "ask": [
          "<!—комментарий --> <s>",
          " /* комментарий */",
          "// комментарий",
          "в html нельзя ставить комментарии"
        ]
      },
      "qsn2": {
        "qsn": "2. С помощью какого тега в HTML создаются ссылки?",
        "ask": ["<p>", "<i>", "<b>", "<a> <s>"]
      },
      "qsn3": {
        "qsn": "3. Каким является следующий адрес ссылки: ../page2.html",
        "ask": ["Абсолютным", "Относительным <s>"]
      },
      "qsn4": {
        "qsn": "4. Каким является следующий адрес ссылки: pages/page2.html        ",
        "ask": ["Абсолютным", "Относительным <s>"]
      },
      "qsn5": {
        "qsn": "5. Как сделать картинку ссылкой?",
        "ask": [
          "<img href='https://webshake.ru/html-training-course' src='promo.png'>",
          "<a href='https://webshake.ru/html-training-course'><img src='promo.png'></a> <s>",
          "<img link='https://webshake.ru/html-training-course' src='promo.png'>"
        ]
      },
      "qsn6": {
        "qsn": "6. С помощью какого тега следует разделять абзацы?",
        "ask": ["<p> <s>", "<br>", "<span>", "<b>"]
      },
      "qsn7": {
        "qsn": "7. Каких тегов в HTML не существует?",
        "ask": ["Парных", "Одиночных", "Тройных <s>"]
      },
      "qsn8": {
        "qsn": "8. Какой тег при создании страницы не является обязательным?",
        "ask": ["body", "strong <s>", "doctype", "head"]
      },
      "qsn9": {
        "qsn": "9. Какой тег отвечает за создание элемента картинки",
        "ask": ["<image>", "<img> <s>", "<picture>"]
      },
      "qsn10": {
        "qsn": "10. Что не находиться в теге head",
        "ask": ["<meta>", "<title>", "<rtag> <s>"]
      }
    }
  },
  "Css": {
    "icon": "img/icon/css.png",
    "СSS": [
      "<s>Стилем или CSS (Cascading Style Sheets, каскадные таблицы стилей) называется набор параметров форматирования, который применяется к элементам документа, чтобы изменить их внешний вид.",
      "Я считаю, что наступил самый сложный этап обучения. Здесь много кто отказывается от прежней мечты быть веб разработчиком. Начались ягодки. Тяжело уложить все получаемые знания, ведь знакомясь с css вы будите изучать целую кучу свойств, которые еще надо правильно между собой комбинировать. Вы будите учиться разделять сложный объект на кучу свойств. Возможно вы будите чувствовать себя необучаемым, но потерпите до первого результата.",
      "Иными словами, с помощью этой технологии элементам можно задать любой внешний вид. С помощью css можно менять цвет, размер, форму, тень, обводку и добавить анимацию. В общем все, что может придумать дизайнер.",
      "Css сегодня это неотъемлемая часть сайтостроения, ведь нынешний пользователь не станет посещать сайт, если информацию оттуда тяжело воспринимать. Тем более конкуренция не позволяет выглядеть современным сайтам плохо. ",
      "И так мы уже разобрались с тем как наполнить страницу нужными нам элементами, но признаемся честно, выглядит все это не очень. Css это тот инструмент, который позволит вашему сайту выглядеть хорошо. Все что касается отображения элемента будь то размер, цвет, форма, расположение и т.п. прописывается с помощью css."
    ],
    "добавления css на страницу": [
      "Для добавления стилей на веб-страницу существует несколько способов, которые различаются своими возможностями и назначением. Далее рассмотрим их подробнее",
      "При использовании связанных стилей описание селекторов и их значений располагается в отдельном файле, как правило, с расширением css, а для связывания документа с этим файлом применяется тег <link>. Данный тег помещается в контейнер <head>. Это основной способ добавления стилей на страницу.",
      "img/2/2.1.jpg big",
      "При использовании глобальных стилей свойства CSS описываются в самом документе и располагаются в заголовке веб-страницы. По своей гибкости и возможностям этот способ добавления стиля уступает предыдущему, но также позволяет хранить стили в одном месте, в данном случае прямо на той же странице с помощью контейнера <style>. ",
      "img/2/2.2.jpg big",
      "Внутренний или встроенный стиль является по существу расширением для одиночного тега, используемого на текущей веб-странице. Для определения стиля используется атрибут style, а его значением выступает набор стилевых правил.",
      "img/2/2.3.jpg big"
    ],
    "Базовый синтаксис CSS": [
      "Cтилевые правила записываются в своём формате, отличном от HTML. Основным понятием выступает селектор — это некоторое имя стиля, для которого добавляются параметры форматирования. В качестве селектора выступают теги, классы и идентификаторы. Общий способ записи имеет следующий вид.",
      "img/2/2.4.png",
      "На данном изображении мы обращаемся к тегу body и задаем ему цвет заднего фона. Вначале пишется имя селектора, например, TABLE, это означает, что все стилевые параметры будут применяться к тегу <table>, затем идут фигурные скобки, в которых записывается стилевое свойство, а его значение указывается после двоеточия. Стилевые свойства разделяются между собой точкой с запятой, в конце этот символ можно опустить.",
      "Вот пример записи нескольких свойств элементу.",
      "img/2/2.5.jpg big",
      "Комментарии в css пишутся так ",
      "img/2/2.6.jpg big",
      "Попробуйте прямо сейчас к созданному ранее html файлу подключить css, неважно каким из способов и попытайтесь поменять фон страницы со стандартного белого на красный. Как пишется свойство меняющее фон элемента было выше. В том примере цвет определяется через решётку, но вы можете написать просто 'red'."
    ],
    "Обращение к элементу": [
      "Так ват вы уже могли понять, что чтобы описать свойства элементу, нужно к этому элементу как-то обратиться. Почему бы не обращаться к нему по тегу как показано в примере выше? Проблема заключается в том, что одинаковых тегов на странице может быть очень много и если вашей целью не является определить для них одни и те же стили, то тут приходят на помощь классы и id.",
      "То есть в css можно обращается к элементу по его классу или id. Делается это так. Есть у нас допустим элемент с классом ‘box’ и мы хотим поменять ему цвет фона. Для этого мы в подключенных стилях пишем точку и название класса, а после задаем ему нужное нам свойство.",
      "img/2/2.7.jpg big",
      "Обращение по id то же самое, но вместо точка будет решётка ",
      "img/2/2.8.jpg big",
      "Важно понимать, что один id мы можем присвоить только одному элементу, а определенный класс можно подключать к нескольким элементам. Чаще всего для обращения к элементу используют class, так как таким образом можно задать нескольким элементам одни и те же стили. Например, нам нужно застилизовать пункты меню, у них будут одинаковый шрифт, размер, цвет и т.п. Вот как будет выглядеть html",
      "img/2/2.9.jpg big",
      "А вот так будет выглядеть css стили",
      "img/2/2.10.jpg big",
      "Попробуйте реализовать нечто подобное.",
      "Так же сюда можете запихать и тему контекстных селекторов. Это когда у нас допустим в элементе div с классом menu есть единственный тег span, к которому надо обратиться, но придумывать и писать для этого отдельный класс как-то не хочется. Тогда мы можем обратиться к этому тегу, но не в рамках целого документа (то есть не ко всем span`ам), а в рамках определенного элемента ",
      "img/2/2.12.jpg big",
      "так же можно обращаться к элементам через запятую и писать для них общие стили. ",
      "img/2/2.13.jpg big"
    ],
    "Свойства css": [
      "Тут будет сложнее чем с тегами в html. Придется знать кучу свойств, чтобы уметь верстать более-менее серьезные страницы. Гугл в этом случае ваш лучший друг. Для того чтобы найти нужное вам свойство задайтесь вопросом ‘что конкретно мне нужно? ’. Может быть вам нужно передвинуть элемент или поменять цвет его фона или поменять цвет и размер шрифта так далее. То есть вбиваем конкретный вопрос, например, ‘как увеличить межстрочный интервал css ’ или 'как выcтроить элементы в ряд по горизонтали' по мере необходимости вы будите знакомиться с новыми свойствами css.",
      "Существует много на первый взгляд похожих свойств, но применять их нужно в разных ситуациях, например, margin и padding. Margin используется для отступов снаружи а, padding отступы внутри, применять их надо в разных ситуациях и понять эту разницу вы сможете только достаточно раз использовав, то есть с опытом.",
      "Некоторые свойства разбивают на отдельные подсвойства, например, есть margin, но также есть margin-left, margin-right, margin-top и margin-bottom.",
      "Еще нужно иметь в виду и то что некоторые свойства могут работать по-разному в разных браузерах, либо вместо этого свойства придумали аналог, который удобнее использовать, например, использовать float моветон, когда flex уже добрался до всех браузеров.",
      "Попробуйте создать страницу с заголовком и абзацем. Попытайтесь изменить размер заголовка и его цвет. А абзац оттолкнуть от заголовка на 20 px и чтобы еще все это было по середине страницы. ",
      "img/2/2.11.jpg "
    ],
    "Единицы измерения": [
      "В CSS существует множество единиц измерения. Обычно мы используем единицы размеров, но также есть единицы для углов — например, deg и turn, единицы времени — s и ms, единицы плотности экрана — например, dpi и dppx и другие.",
      "Здесь будут рассматриваться только единицы размеров, которыми мы пользуемся чаще всего.",
      "Общим для всех единиц длины будет то, что для значения 0, единицы можно не указывать: height: 0px и height: 0 будут работать одинаково, так что единицы измерения можно отбросить. Это позволяет немного быстрее писать код и считывать значения свойств.",
      "Существует большое количество единиц измерения, одной самых популярных является пиксели ",
      "Пиксель — это базовая, абсолютная и окончательная единица измерения. <s>",
      "Почему бы во всех свойствах, требующих единицу измерения длины не использовать пиксели? Все дело в том, что разных случаях есть более удобные, например, нам нужно сказать элементу, чтобы он занимал половину от своего родителя и мы конечно можем узнать размер родительского элемента (нажмите f12 и наведитесь на нужный вам элемент), посчитать его половину и присвоить, но это не целесообразно, когда есть проценты. То есть мы стразу можем сказать элементу: занимай 50% от родительского элемента. Это пример использования относительной единицы измерения.",
      "Относительные единицы измерения вычисляются на основе каких-то других величин: размера шрифта или размера экрана, и могут динамически меняться вместе с ними. <s>",
      "Но не стоит, например, задавать высоту элемента в процентах, если точно не знаешь высоту родительского блока. Высота блока зависит от его заполненности и отталкиваться от таких неопределённых данных, при использовании процентов, не стоит. ",
      "Изначально блочный элемент имеет нулевую высоту и 100% ширину и когда в этом блочном элементе появляется содержимое то высота блока подстраивается под это содержимое. Но иногда нам нужно чтобы высота была как минимум в пол экрана (часто нужен для приветствующих экранов или слайдеров). Для этого мы, во-первых, пишем свойство min-height которое в отличии от обычного height позволит увеличивать высоту элемента по мере поступления туда содержимого, а во-вторых пишем значение не в px или в %, а в vh(зависит от высоты экрана). Чтобы такой элемент занял пол экрана нужно присвоить значение 50vh.",
      "Размер текстам и некоторым блокам можно задавать в rem. Они равны значению font-size для тега html (изначально 16px), а значит это значение можно будет перезадать, просто изменив значения для этого свойства у тега html. В будущем, при необходимости пропорционально уменьшить все что вы задавали с помощью rem, можно будет в одну строчку кода. Это очень помогает в процессе адаптивности под другие устройства (тема адаптивности будут следующей).",
      "На начальных этапах можете смело писать все в пикселях. И через 2, 3 сверстанных макета, когда вы более-менее привыкните к написанию кода, можете задуматься над тем как можно сделать то же самое проще и гибче. Не заморачивайтесь над тем что не используете весь потенциал разных единиц измерения. Изучайте все по мере необходимости.",
      "https://www.youtube.com/watch?v=gSr7DW_89xU",
      "https://www.youtube.com/watch?v=dPzoBD2Z68A"
    ],
    "Адаптивность": [
      "Сразу говорю, что данный этап не обязателен для новичков, которые верстают свой первый макет. Просто имейте ввиду то что front-end разработчик должен продумать то как его сайт будет отображаться на гаджетах у пользователя.",
      "Вкратце адаптивность это любые действие разработчика, направленные на то чтобы сайт отображался на разных экранах адекватно и им удобно было пользоваться. <s>",
      "Первое правило адаптивности: отсутствие горизонтальной полосы прокрутки на всех устройствах. Чтобы этого добиться используют относительные единицы измерения для задания ширины элементам. Полученный результат в ходе таких действий называют резиновой версткой. ",
      "Чаще всего наполнения любого блока является текст и если вы делайте резиновый блок, то текст подстроится под его ширину. Но когда экран пользователя очень маленький (мобильный телефон), то блок уменьшается в ширину, но в высоту очень сильно увеличивается и сами буквы будут выглядят большими. Так что было бы неплохо задать условие: если экран этого пользователя меньше, допустим 700px, то текст меньше на 1px, чем изначально заданный. Такие условия можно задавать через так называемые медиа запросы. Используйте rem для задания любой величины которую нужно будет поменять при изменении экрана и тогда в условии медиа запроса вы сможете поменять их буквально одной строчкой, вместо того чтобы прописывать это вручную для каждого элемента.",
      "Так же очень советую в случаях, когда нужно поставить элементы в ряд по горизонтали использовать flex-box. И в связке с медиа запросами это позволит легко перестроить элементы в вертикальное положение, когда элементы не смогут отображаться адекватно по горизонтали из-за маленькой ширины экрана пользователя.",
      "Так же адаптивность подразумевает то что вашим сайтом будет удобно пользоваться с помощью сенсорных экранов. Это значит, что, допустим слайдеры должны листаться не только с помощью кнопки, но и с помощью свайпа влево или в право. О слайдерах поговорим позже, когда мы зайдем на территорию js (JavaScript привыкайте к сокращениям)."
    ],
    "Псевдоклассы и псевдоэлементы": [
      "Это то что пишется после обращения к элементу через двоеточие. Например, как здесь:",
      "img/2/2.14.jpg big",
      "Это псевдокласс, который позволяет менять css свойства элемента при наведении на него. Он наиболее часто встречается при разработке и позволяет оживить сайт даже без написания скриптов. Вы можете посмотреть видеоролик с применения этого и других популярных псевдоклссов.",
      "https://www.youtube.com/watch?v=cbbER36qRIE",
      "С превдоэлементами еще проще. Наиболее часто встречающейся это before и after. Вам достаточно посмотреть пару видео и вам станет ясно, когда их можно использовать.",
      "https://www.youtube.com/watch?v=hgeGBbC4HZ4"
    ],
    "Итог": [
      "В css можно бесконечно углубляться. Лично я советую дойти до того уровня, чтобы вы могли уверенно сверстать какой-нибудь такой <a href='http://psd-html-css.ru/templates/mogo-besplatnyy-psd-shablon-lendingovoy-stranicy'> макет </a>. ",
      "Для того чтобы понять, как создавать полноценные сайты с макета, я советую смотреть марафоны, где покажут процесс написания сайтов с нуля, современным способом и с адаптивностью. Таких пособии в видео формате полно на youtube. Вбейте туда что-то вроде этого ‘css html марафон’ и попытайтесь внимательно посмотреть процесс создания первого блока. Попытайтесь осознать каждый шаг блогера, а уже после повторите все самостоятельно. Это может быть сложно и не комфортно, но поверьте это наибыстрейший способ понять, как работает сайтостроение в общем.",
      "Данный мини курс не является самым подробным, но он направлен на то чтобы познакомить вас с основными терминами в css, дать толчок в прохождении этого длинного пути. С момента написания своего первого css свойства до уверенной верстки полноценного сайта на html и css может пройти очень много времени: от нескольких недель до нескольких месяцев. Все зависит от того как интенсивно вы будите этим заниматься. Такие знания не усваиваются сразу после прочтения даже самой подробного руководства, они потихоньку впитываются через руки, так что очень важной частью обучения в данной сфере является практика. ",
      "Очень хорошим решением, чтобы все не бросить и иметь мотивацию продолжать обучение будет создать сайт, связанный с вами и с вашим кругом общения. Допустим сайт про игры, которые вы играете с друзьями. Вы вольны написать там все что угодно, допустим кто какую роль в этой самой игре занимает. Покажите им свой результат и., скорее всего, вы получите в ответ позитивные отзывы. При обучении важно видеть свой прогресс, который можно оценить, судя по реакции других людей на ваше творение."
    ]
  },
  "JaveScript": {
    "icon": "img/icon/js.png",
    "Как запустить JavaScript": [
      "Написать и запустить JavaScript можно двумя способами: первый заключается в том, что мы пишем код прямо на HTML странице внутри тега <script>:",
      "img/3/3.1.jpg big",
      "Тег <script> можно располагать в любом месте страницы - как в <head>, так и в <body>.",
      "Второй вариант заключается в том, что JavaScript код хранится в отдельном файле (наподобие CSS) и подключается тоже с помощью тега <script> с атрибутом src, в котором указывается путь к файлу со скриптом:",
      "img/3/3.2.jpg big",
      "В дальнейшем я не буду расписывать то, как подключается JavaScript, а буду просто писать HTML код в одном блоке, а JavaScript код - в другом."
    ],
    "Основы работы с JavaScript": [
      "Данные - это объекты, которыми может оперировать JavaScript, к примеру, имя пользователя - это строка, а его возраст - это число. Данные могут быть разных типов.",
      "Строки и числа",
      "Самыми простыми типами данных в JavaScript являются строки и числа.",
      "Числа обозначают сами себя: 1, 12, 145, а вот строки требуется брать в кавычки (одинарные или двойные - без разницы):",
      "img/3/3.3.jpg big",
      "Одним из самых главных и распространенных объектов в программировании является переменная.",
      "Переменная - это такой объект, который может хранить внутри себя различные данные, например, строки или числа.<s>",
      "Имя переменной должно состоять из английских букв: больших или маленьких, а также цифр и знака_подчеркивания.",
      "В JavaScript при объявлении переменной обязательно должно быть написано ключевое слово let или var:",
      "img/3/3.4.jpg big",
      "Операция присваивания",
      "Очень важным элементом программирования является операция присваивания. Пример присваивания:",
      "img/3/3.5.jpg big",
      "В коде JavaScript, так же, как и в HTML и CSS, можно оставлять комментарии. Они могут быть многострочными и однострочными:",
      "img/3/3.6.jpg big",
      "Комментарии игнорируются браузером при выполнении кода, в них можно оставлять какие-либо пометки или временно закрывать код от исполнения, чтобы потом его при необходимости вернуть (откомментировать).      ",
      "В JavaScript существует специальная функция alert, которая позволяет вывести какой-либо текст в окно браузера в виде диалогового окошка. Следующий код выводит на экран заданный текст:",
      "img/3/3.7.jpg big",
      "В JavaScript между числами можно совершать различные математические операции:   ",
      "img/3/3.8.jpg big",
      "В JavaScript можно получить доступ к определенному символу строки по его номеру таким образом: a[n] – n-ный символ строки (учтите, что нумерация идет с нуля):",
      "img/3/3.9.jpg big",
      "Операция a++ или ++a – увеличивает переменную a на единицу. Эта операция называется инкремент. Операция a-- или --a – уменьшает переменную a на единицу. Эта операция называется декремент. Примеры:",
      "img/3/3.10.jpg big",
      "В JavaScript, как и в других языках программирования, существуют ключевые слова для некоторых специальных значений. Вот они: undefined, null, true, false, NaN, Infinity, -Infinity.",
      "Значение undefined обозначает неопределенность. К примеру, если мы попробуем обратиться к переменной, которой мы еще не задали значение - то ее значение и будет undefined.",
      "img/3/3.11.jpg big",
      "Значения true и false обозначают истину и ложь соответственно. Они используются для таких вещей, которые предполагают два варианта ответа - да или нет. К примеру, на вопрос 'вам уже есть 18 лет?' в можете ответить да, то есть true, или нет, то есть false.",
      "Значение NaN (Not-A-Number) обозначает не число. Оно может получится, к примеру, в таком случае - когда вы умножаете строку с буквами на число:",
      "img/3/3.12.jpg big",
      "Что будет, если попробовать перемножить, к примеру, число и строку, вот так: 3 * '3'? В результате вы получите число 9. Это значит, что JavaScript автоматически осуществляет преобразование типов при необходимости, вам не нужно за это переживать.",
      "Однако, есть нюанс: если мы попытаемся сложить строку и число, то JavaScript сложит их как строки, а не как числа, вот так: '3' + 3 получится строка '33', а не число 6.      ",
      "В случае, например, с умножением JavaScript понимал, что нельзя перемножить строки, поэтому строки переводил в числа и перемножал их. А случай со сложением можно трактовать двояко: складывать как строки или как числа (плюс-то используется как для сложения строк, так и чисел).      ",
      "Бороться с этим можно следующем способом: нужно сделать недопустимую для строк операцию, например, так: +'3' + 3 - поставим плюс перед строкой и она преобразуется к числу.      ",
      "Второй вариант такой: можно сказать яваскрипту, что мы хотим явно преобразовать строку к числу. Это делается с помощью функции Number, вот так: Number('3') + 3. В результате получится 6, а не '33'.      ",
      "К числам могут преобразовываться не только строки, но и любые другие типы данных, например true тоже можно преобразовать к числу таким образом: Number(true).      ",
      "Можно преобразовывать и к другим типам с помощью функций Boolean, String и других подобных.      "
    ],
    "Массивы и объекты": [
      "В программировании очень часто возникает задача хранения списка похожих значений, например, всех дней недели или всех месяцев. Можно было бы создавать под каждое значение списка свою переменную, но это очень неудобно и долго - для списка дней недели понадобилось бы 7 переменных, а для месяцев - вообще 12.      ",
      "А теперь представьте, что вам нужно вывести на экран название третьего месяца. С помощью 12-ти различных переменных это было бы проблематично, так как вам необходимо помнить названия всех переменных, в которые вы записали имена месяцев.      ",
      "Поэтому для таких вещей был изобретен специальный тип данных. Он называется массив.      ",
      "Массив создается с помощью квадратных скобок [ ]:      ",
      "img/3/3.13.jpg big",
      "Пока созданный нами массив не содержит никаких данных. Заполним его названиями дней недели:      ",
      "img/3/3.14.jpg big",
      "Каждое значение списка, который мы записали в массив (в нашем случае каждый день недели), называется элементом массива.      ",
      "Элементы разделяются между собой запятой. После этой запятой можно ставить пробелы, а можно и не ставить.      ",
      "Обратите внимание на то, что названия дней недели представляют собой строки и поэтому взяты в кавычки. Кроме строк в массиве можно хранить числа, и их в кавычки мы не берем:      ",
      "img/3/3.15.jpg big",
      "Предположим, мы хотим вывести на экран среду с помощью составленного массива дней недели. Делается это так: нужно после переменной массива (в нашем случае arr) написать квадратные скобки [ ], а в них указать порядковый номер элемента, который мы хотим вывести: arr[3]. Казалось бы, что порядковый номер среды - это 3, но это не так. Потому что в программировании нумерация начинается с нуля. Поэтому 0 - это понедельник, 1 - это вторник, а 2 - это среда. Посмотрите и повторите пример:",
      "img/3/3.16.jpg big",
      "В предыдущем примере, чтобы обратиться к нужному элементу массива, мы писали в квадратных скобках его порядковый номер (нумерация начинается с нуля, если вы уже забыли). Эти порядковые номера называются ключами массива.      ",
      "То есть мы получали значение элемента массива по его ключу. В нашем случае JavaScript сам определял ключи для элементов - это были их порядковые номера. Иногда это может оказаться неудобным - к примеру, если мы хотим вывести на экран название третьего дня недели (среду), то должны написать в квадратных скобках цифру 2, а не 3. Поэтому в JavaScript можно указать ключи в явном виде – так, как нам нужно. Делается это с помощью объектов (в других языках программирования они называются ассоциативными массивами). Объекты создаются с помощью фигурных скобок { }, внутри которых пишутся элементы этого объекта в формате ключ: значение. Давайте сделаем так, чтобы понедельник имел ключ 1, а не ноль, как было раньше (и всем остальным дням прибавим единицу):",
      "img/3/3.17.jpg big",
      "Синтаксис здесь такой: ключ, затем идет двоеточие :, а потом значение. Ключи не обязательно должны быть числами, они могут быть и строками. Сделаем массив, в котором ключами будут имена работников, а элементами - их зарплаты:",
      "img/3/3.18.jpg big",
      "Узнаем зарплату Васи:      ",
      "img/3/3.19.jpg big",
      "Кроме того, кавычки вокруг строковых ключей можно и не ставить      ",
      "img/3/3.20.jpg big",
      "Однако, на такие ключи накладываются ограничения: они не должны начинаться с цифры, не должны иметь символ дефиса или символ пробела внутри. Если у вас есть такой ключ - просто возьмите его в кавычки и все будет ок.",
      "Элементы массива могут быть не только строками и числами, но и массивами. То есть у нас получится массив массивов или многомерный массив. Давайте сделаем массив студентов students, который будет содержать два подмассива: студенты мужского пола и женского:",
      "img/3/3.21.jpg big",
      "Чтобы вывести какой-либо элемент из многомерного массива следует писать уже не одну пару [ ], а две: students['boys'][0] – так мы выведем 'Коля'.      "
    ],
    "Конструкции условий": [
      "Для того, чтобы напрограммировать что-нибудь полезное, одних переменных далеко не достаточно. Нам нужен механизм, который позволит выполнять определенный код в зависимости от каких-либо условий. То есть нам нужно иметь возможность спросить у JavaScript 'Если'. Например так: если эта переменная меньше нуля, то вывести 'отрицательно', иначе (то есть если она больше нуля) вывести 'положительно'. В JavaScript для таких вопросов предназначена конструкция if, которая позволяет выполнять определенный код при выполнении какого-либо условия:",
      "img/3/3.22.jpg big",
      "Обратите внимание на то, что блок else не обязателен. Логическое выражение представляет собой тот самый вопрос, который мы хотим задать JavaScript. Например, чтобы спросить 'переменная a больше нуля' мы напишем так: a > 0. Примеры работы:",
      "img/3/3.23.jpg big",
      "Для того, чтобы сравнить на равенство следует использовать оператор двойное равно ==, а не одиночное =, как можно было подумать. Почему так? Потому что одиночное равно зарезервировано за присваиванием. Смотрите пример:",
      "img/3/3.24.jpg big",
      "Для того, чтобы спросить 'не равно', существует операторы != и !==. Первый игнорирует различие в типах, а второй - нет.",
      "img/3/3.25.jpg big",
      "Иногда может быть нужно составить какое-то сложное условие, например, пользователь вводит месяц своего рождения и вам нужно проверить, что введенное число больше или равно 1 и меньше либо равно 12 (так как в году 12 месяцев). Для этого существуют операторы && (логическое И) и || (логическое ИЛИ).",
      "img/3/3.26.jpg big",
      "Предположим, нам необходимо спросить у JavaScript такую вещь: если переменная a не определена, то вывести 'Введите a', если определена, то проверить - больше нуля a или нет. Если больше нуля - то вывести 'Больше нуля!', если меньше - вывести 'Меньше нуля'. Одной конструкцией if здесь не обойтись, нужно использовать две таким образом, чтобы одна была внутри другой:",
      "img/3/3.27.jpg big",
      "Недостатком конструкции предыдущего примера является большое количество фигурных скобок. Чтобы избавиться от них, можно пользоваться специальной конструкцией else if, которая представляет собой одновременно и else, и начало вложенного if:",
      "img/3/3.28.jpg big",
      "Можно использовать несколько else if, но злоупотреблять этим не стоит (лучше будет воспользоваться конструкцией switch-case, о которой ниже).      ",
      "Данная конструкция представляет собой альтернативу if-else, ее рекомендуется использовать в случае множественного выбора (например, 10 различных языков, как в нашей задаче). Изучите ее синтаксис:",
      "img/3/3.29.jpg big"
    ],
    "Циклы": [
      "Циклы используются для того, чтобы некоторый участок кода выполнился несколько раз подряд.<s>      ",
      "Зачем это нужно - представьте, что вам нужно возвести в квадрат 100 элементов массива. Если обращаться к каждому элементу отдельно по его ключу - это займет 100 строчек кода, и для того, чтобы написать этого код, нужно будет потратить довольно много времени. Но это не нужно - у нас есть возможность сделать так, чтобы JavaScript за нас выполнил некоторую операцию нужное количество раз. Например, возвел все элементы массива в квадрат. Делается это с помощью циклов.",
      "Цикл while будет выполняться до тех пор, пока верно (истинно) выражение, переданное ему параметром. Смотрите синтаксис:",
      "img/3/3.30.jpg big",
      "В принципе, цикл while может выполняться бесконечно (но это приведет к зависанию скрипта!), достаточно передать ему выражение, которое никогда не станет ложным. Давайте последовательно выведем с помощью цикла while числа от одного до пяти: ",
      "img/3/3.31.jpg big",
      "Обратите внимание на переменную i – она является так называемым счетчиком цикла. Счетчики используются для того, чтобы подсчитывать, сколько раз выполнился цикл. Кроме того, они выполняют вспомогательную роль - в нашей задаче мы использовали счетчик, чтобы вывести цифры от 1 до 5. Для счетчиков принято использовать буквы i, j и k.",
      "Цикл for является альтернативой while. Он более сложен для понимания, но чаще всего его любят больше, чем while за то, что он занимает меньше строчек.",
      "img/3/3.32.jpg big",
      "Начальные команды - это то, что выполнится перед стартом цикла. Они выполнятся только один раз. Обычно там размещают начальные значения счетчиков, пример: i = 0. Условие окончания цикла - пока оно истинное, цикл будет работать, пример: i <10. Команды после прохода цикла - это команды, которые будут выполнятся каждый раз при окончании прохода цикла. Обычно там увеличивают счетчики, например: i++. Давайте с помощью цикла for выведем последовательно числа от 0 до 9:",
      "img/3/3.33.jpg big",
      "С помощью цикла for можно последовательно перебрать элементы массива. Делается это следующим образом:",
      "img/3/3.34.jpg big",
      "Для перебора объекта используется так называемый цикл for-in. Давайте посмотрим, как он работает. Пусть у нас дан такой объект:",
      "img/3/3.35.jpg big",
      "Давайте выведем его ключи. Для этого используем такую конструкцию: for (key in obj), где obj - это объект, который мы перебираем, а key - это переменная, в которую последовательно будут ложится ключи объекта (ее название может быть любым, какое придумаете - такое и будет). То есть в данном цикле не надо указывать условие окончания - он будет перебирать ключи объекта, пока они не закончатся. Итак, вот так мы выведем все ключи объекта (по очереди):",
      "img/3/3.36.jpg big"
    ],
    "Функции": [
      "Вы уже знаете многие стандартные функции JavaScript, например substr(), reverse(), split(). Их использование очень удобно - чтобы написать свои аналоги на JavaScript, потребовалось бы много времени и сил. Однако, с помощью стандартных функций невозможно сделать все, что нам требуется. На помощь приходит такой механизм JavaScript, как функции пользователя. С их помощью мы можем создавать свои функции, принцип работы которых аналогичен стандартным функциям JavaScript.",
      "Очень часто при программировании возникает такая ситуация: некоторые участки кода повторяются несколько раз в разных местах. Пользовательские Функции нужны для того, чтобы убрать дублирование кода. Дублирование плохо тем, что если вам потребуется что-то поменять в коде - это придется сделать во многих местах При этом обязательно в каком-нибудь месте вы это сделать забудете. Практика копирования участков кода и вставки в другое место - очень плохая практика (очень часто ей грешат новички). Кроме того, функции скрывают внутри себя какой-то код, о котором нам не приходится задумываться. Например, у нас есть функция saveUser(), которая сохраняет пользователя в базу данных. Мы можем просто вызывать ее, не задумываясь о том, какой код выполняется внутри функции. Это очень удобно. В программировании это называется инкапсуляцией.",
      "Функция создается с помощью команды function. Далее через пробел следует имя функции и круглые скобки. Круглые скобки могут быть пустыми, либо в них могут быть указаны параметры, которые принимает функция.Параметры - это обычные переменные JavaScript. Сколько может быть параметров: один, несколько (в этом случае они указываются через запятую), ни одного (в этом случае круглые скобки все равно нужны, хоть они и будут пустыми).",
      "img/3/3.37.jpg big",
      "Саму функцию мы можем вызвать в любом месте нашего JavaScript документа (даже до ее определения). Функция вызывается по ее имени. При этом круглые скобки после ее имени обязательны, даже если они пустые. Смотрите пример:",
      "img/3/3.38.jpg big",
      "В наших примерах мы вызывали функцию 'hello()' без параметров. Давайте теперь попробуем ввести параметр, который будет задавать текст, выводимый нашей функцией:",
      "img/3/3.39.jpg big",
      "Обратите внимание на переменную text в нашей функции: в ней появляется то, что мы передали в круглых скобках при вызове функции. Как JavaScript знает, что текст 'Привет, Земляне!' нужно положить в переменную text? Мы сказали ему об этом, когда создавали нашу функцию, вот тут: 'function hello(text)'.Если мы зададим несколько параметров - то каждый из них будет лежать в своей переменной внутри функции",
      "Чаще всего функция должна не выводить что-то через alert на экран, а возвращать. Сделаем теперь так, чтобы функция не выводила что-то на экран, а возвращала текст скрипту, чтобы он смог записать этот текст в переменную и как-то обработать его дальше:",
      "img/3/3.40.jpg big",
      "В принципе, практической пользы от того, что мы сделали - никакой, так как функция вернула нам то, что мы ей передали. Модернизируем наш пример так, чтобы функция принимала имя человека, а выводила строку 'Привет, %имя_человека_переданное_функции%!':",
      "img/3/3.41.jpg big",
      "После того, как выполнится инструкция return – функция закончит свою работу. То есть: после выполнения return больше никакой код не выполнится. Это не значит, что в функции должен быть один return. Но выполнится только один из них. Такое поведение функций является причиной многочисленных трудноуловимых ошибок. Смотрите пример:",
      "img/3/3.42.jpg big"
    ]
  }
}
