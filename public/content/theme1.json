{
  "HTML": {
    "icon": "img/icon/html.png",
    "Предисловие": [
      "Веб(web) - это одна из сфер программирования, которая очень быстро развивается, и безостановочно растет во все стороны. Уже сейчас возможно написать программу для windows, линукс, mac и даже андроид устройств, пользуясь инструментами веба. Кстати, примером этому факту может послужить программа, в которой вы сейчас находитесь.",
      "img/1/1.1.png",
      "Веб может показаться необъятным. Html, js, css, scss, jQuery, bootstrap и прочих методологии с Фреймворками и библиотеками, не говоря уже о паттернах программирования, работе с сервером и базой данных. Видя такие слова можно потерять веру в свою обучаемость и просто сдаться. Но не стоит забывать, что тяжело только по началу. Все переплетено, и понимая одну технологию можно догадаться как с ней работает другая. Как в пазле, легче его заканчивать, нежели начинать собирать.",
      "И все же необходимо четко делить сайт на 2 мира, что работают чаще всего вместе, но могут разрабатывается отдельно друг от друга. Это frontend и backend. Frontend это то, что по итогу видит пользователь: странички, интерфейс, анимации и т. д. То есть, это все что касается оформления сайта. Backend это то, что делает сайт за кулисами: отправка данных, поддержка сервера, обработка запросов и т. п. Фронт (frontend) гораздо проще для понимания, ведь это по сути визуал, который все мы уже видели и щупали на любых сайтах.",
      "И так давайте упростим задачу, с изучения полного цикла создания сложных сайтов, до создания небольшой странички 'визитки'. То есть только фронт. Для этого познакомимся с 3 китами веба: html, css и javascript. Эти технологии есть на всех сегодняшних сайтах и являются необходимой базой для создания самои простой веб странички. "
    ],
    "Html": [
      "img/1/1.2.jpg",
      "HTML (от англ. HyperText Markup Language — «язык гипертекстовой разметки») — стандартизированный язык разметки документов во Всемирной паутине <s>",
      "Почему именно 3 кита (html, css, js)? Все потому что каждый инструмент выполняет свою функцию. Html нам нужен для обозначения элементов на сайте. Откройте любой сайт и посмотрите из чего он состоит. Из ссылок, картинок, текcта и так далее. Все это элементы страницы.",
      "Прямо сейчас создайте у себя на компьютере файл любого типа, например txt, Это не принципиально важно, все равно мы поменяем это расширение на html. После того как мы его поменяли, можно заметить что иконка документа сменилась на иконку браузера. Поздравляю эта ваш первый сайт. Кликните по ней 2 раза и отроется браузер с вашей страницей. Как видите она пуста. На ней нет элементов ссылок, картинок и текста, потому что сам файл пуст. Сверните браузер откройте файл с помощью блокнота. Напишите в нем что угодно, например 'hello world'. Теперь перейдите в браузер и обновите страницу. Чудеса правда? Вывод в том что с помощью html можно создавать содержимое для сайта."
    ],
    "Теги и атрибуты": [
      "Текст это конечно хорошо но хотелось бы чего ни будь посерьезнее, например ссылку. То есть нам нужен другой элемент. Как же нам сказать браузеру, что вместо текста нам нужна ссылка? Тут и нужны теги.",
      "HTML-теги — основа языка HTML. Теги используются для разграничения начала и конца элементов в разметке.<s>",
      "Выглядит это как-то так",
      "img/1/1.3.jpg big",
      "Вы все правильно поняли. Тег 'a' говорит браузеру: все что находиться между '< a>' и  '</ a>' является ссылкой. это понятно, но что за 'href' ? Это называется  атрибут, с помощью которого браузер понимает куда надо переходить.",
      "<s> HTML-атрибуты сообщают браузеру, каким образом должен отображаться тот или иной элемент страницы. Атрибуты позволяют сделать более разнообразными внешний вид информации, добавляемой с помощью одинаковых тегов.",
      "Теги бывают парными и одиночными. На рисунке показаны парные теги, то есть, которые открывется и закрывается (например, выше описанная ссылка). Атрибуты пишутся в открывающем теге.",
      "Тегов очень много и нет смысла знать все. Достаточно знать всего несколько, которые наиболее часто используются. К таким относятся тег ссылки, тег картинки, тег абзаца, тег загаловка. Для начала столько тегов вам будет достаточно. Давайте разберем каждый из них.",
      "Тег <img> предназначен для отображения на веб-странице изображений в графическом формате GIF, JPEG или PNG и является примером одиночного тега. Адрес файла с картинкой задаётся через атрибут src. Если необходимо, то рисунок можно сделать ссылкой на другой файл, поместив тег <img> в контейнер <a>. При этом вокруг изображения отображается рамка, которую можно убрать, добавив атрибут border='0' в тег <img>. Скачайте какую-нибудь  картинку и поместите ее в ту же папку, где у вас находится html файл. И напишите следующий код: <img src='nazvanieKartinki.jpg'  / >'. Сохраните изменения в файле и обновите страницу(делайте так после любого изменения в файле, чтобы увидеть результат). теперь на странице должна отобразится картинка.",
      "Тег <p> Определяет текстовый абзац. текст внутри этого тега всегда начинается с новой строки. Самый простой тег, не имеющий объязательных атрибутов. Можете написать несколько раз: <p>text1</p> . Часто нужен для отобажения статей, новостей и прочих блоков с текстовой информациеи.",
      "HTML предлагает шесть заголовков разного уровня, которые показывают относительную важность секции, расположенной после заголовка. Так, тег <h1> представляет собой наиболее важный заголовок первого уровня, а тег <h6> служит для обозначения заголовка шестого уровня и является наименее значительным. По умолчанию, заголовок первого уровня отображается самым крупным шрифтом жирного начертания, заголовки последующего уровня по размеру меньше. Теги <h1>,...,<h6> относятся к блочным элементам, они всегда начинаются с новой строки, а после них другие элементы отображаются на следующей строке. Кроме того, перед заголовком и после него добавляется пустое пространство. Можете написать : <h1>title</h1>. Попробуйте поменять 1 на 2, а потом на 3 и так до 6."
    ],
    "Коментарии": [
      "Когда вы создаете большие сайты, то со временем можете забыть, что именно делает та или иная часть кода страницы. И сколь хорошо бы вы ни знали код страницы на момент его написания, если вам придется вернуться к нему спустя какое-то время (или кому-либо еще понадобится просмотреть его), то именно комментарии помогут быстро разобраться с кодом. Комментарии могут располагаться в любом месте страницы, потому что не отображаются браузером. Информация в комментариях не имеет специального значения и не воспринимается как НТМL-код. Комментарии используются чаще для пояснений, например коrдa над кодом работают несколько человек или когдa необходимо временно исключить некий фрагмент кода из обработки, не удаляя ero совсем, то можно заключить такой фрагмент в комментарий, после чего он будет проигнорирован браузером.",
      "Комментарии в HTML имеют следующий синтаксис:",
      "img/1/1.4.jpg big ",
      "Восклицательный знак после утловой скобки означает, что это уже не НТМL-код. Текст, заключенный между тегами <!-- и --> , не отображается веб-браузером. Заметьте, что это нестандартная пара тегов, так как открывающий тег не имеет закрывающей угловой скобки, а в закрывающем теге отсутствует открывающая угловая скобка."
    ],
    "Блочные и встроенные элементы": [
      "Очевидно вы уже заметили, что элементы заголовков <h1> - <h6> и абзацев <p> начинаются с новой строки. Это происходит потому, что они являются примерами блочных элементов различных уровней. Браузеры рассматривают блочные элементы так, словно они заключены в маленькие прямоугольные области – блоки, из которых складываются страницы. По умолчанию каждый блочный элемент начинается с новой строки и, как правило, ограничен сверху и снизу пустыми строками. В следующем примере границы блочных элементов выделены зеленым цветом:",
      "img/1/1.5.jpg ",
      "Обратите внимание как выглядит текст, который мы пометили как курсивный (еm). Он не начинается с новой строки, а остается в составе абзаца. Это происходит потому, что элемент <em> является встроенным или строчным. Встроенные элементы не начинаются с новой строки, а находятся в составе блочных. Встроенным элементам достаточно лишь той ширины, которую физически занимают все элементы, находящиеся в них.",
      "Разница между блочными и строчными элементами следующая: Строчные элементы не могут хранить блочные элементы, а могут содержать только данные или другие строчные элементы; Блочные элементы могут содержать другие блочные элементы, строчные элементы, а также данные; Блочные элементы всегда начинаются с новой строки и, как правило, ограничены сверху и снизу пустыми строками; Блочные элементы занимают всю ширину родительского элемента, например, окна браузера; Строчные элементы занимают ширину равную их содержимому плюс значения отступов, полей и границ.",
      "Примеры блочных элементов: <div>, <h1> - <h6>, <p>, <form>",
      "Примеры строчных элементов: <span>, <a>, <img>"
    ],
    "Общие элементы <div> и <span>": [
      "<s> Элемент <div> — это общий блочный элемент, который применяется для группировки одного или нескольких блочных элементов. Он указывает, что сгруппированные вместе элементы образуют некую смысловую единицу и должны рассматриваться, например таблицей стилей CSS, как одна единица. Используя элемент <div> вместе с таблицами стилей CSS, вы сможете придать одинаковое стилевое оформление для всех элементов, помещенных в контейнер <div>.",
      "Итак, тег <div> служит для того, чтобы: Применять какие-либо настройки к отдельному информационному блоку на сайте; быть контейнером для текста, изображений и других элементов HTML-документа.",
      "<s> Элемент <span> — это общий встроенный элемент, который используется для встроенных элементов, которые не вводят переводов строк. Элемент <span> может содержать только текст и другие встроенные элементы (вы не можете поместить туда блочные элементы: заголовки, списки, элементы группировки контента и т. д.).",
      "Так как элемент <span> — строчный, то есть не требует для себя всей ширины окна браузера, то ему достаточно лишь той ширины, которую физически занимают все элементы, находящиеся в нем. Поэтому элемент <span> часто используется для форматирования отдельных слов внутри абзаца.",
      "Пример использование элементов:",
      "img/1/1.6.jpg big",
      "img/1/1.7.jpg big"
    ],
    "Структура HTML-документа": [
      "Как театр начинается с вешалки, так и любой HTML-документ начинается с базовой структуры. Она включает в себя теги, которые есть в любом HTML-файле. Эти теги и служебная информация нужны браузеру для корректного отображения информации. Взглянем на базовую структуру любого HTML-документа:",
      "img/1/1.8.jpg big",
      "Сразу хочу вас предупредить, что при создании html файла, программисты не прописывают всю структуру заново, так как это давольно нудно. Это дейсвие уже давно автоматизировали, переложив ответственность за это с хрупких плеч прогрммиста на IDE. Так что эту стурктуру не стоит постоянно держать в голове с целью точного воспроизведения в любой момент, а лишь иметь ввиду, что где находится.",
      "Первая конструкция в любом HTML-документе — элемент DOCTYPE. Просто указывает браузеру тип документа, а имено на html.",
      "Тег <html></html> является основой основ. Именно внутри него располагается вся информация. Благодаря этому тегу браузер понимает, где начинается контент, который необходимо обработать как HTML.",
      "Важной частью тега html является наличие атрибута lang. В нём указывается язык, на котором отображается веб-страница. С помощью этого атрибута браузеры могут корректно считать множество специфичных символов, которые присутствуют в разных языках. Помимо этого, атрибут lang начинает использоваться и в CSS, с которым вы познакомитесь в следующих уроках. В новых стандартах CSS появляются свойства, которые опираются на данный атрибут. Например, позволяют корректно переводить слова в тексте. В качестве значения атрибут lang принимает знакомые всем сокращения языков. Для русского — ru, для английского — en, для немецкого — de.",
      "Тег head служит для хранения служебной информации. Здесь возможны самые разные сочетания тегов, которые подсказывают браузеру название страницы, описание, ключевые слова и так далее. Такая информация называется метаинформацией. В современном вебе она отвечает не только за служебную информацию для браузера, но и активно используется при продвижении сайта. Поисковые системы считывают всю эту информацию и на основе множества алгоритмов определяют место сайта при разных поисковых запросах. Любые данные, которые указаны внутри тега head, не видны при отображении страницы в браузере. Это значит, что нет необходимости располагать там информацию, которая предназначена для отображения. Именно в этом теге чаще всего подключаются css стили и шрифты, но об этом чуть позже. Не забивайте голову занчением тега meta(он все равно будет писаться автоматически самой IDE). Содержимое title будет отображаться сдесь:",
      "img/1/1.9.jpg big",
      "После тега head в документе указывается парный тег <body></body>, который является «телом» всей страницы. Именно здесь размещается вся информация, которая будет выведена на странице.",
      "img/1/1.10.jpg big",
      "То есть это та часть документа, с которой мы большую часть времени будем работать. Сдесь пишуться все таги для формирования элементов страницы и подключаются скрипты. Как подключаются скрипты мы разберем позже в разделе про js.",
      "Согласно структуре, простейшая страница будет выглядеть так:",
      "img/1/1.11.jpg big"
    ],

    "HTML Мета-теги": [
      "Мета-теги — это необязательные атрибуты, размещенные в заголовке страницы, между тегами <head> и </head>, которые никак не отображаются браузером (за исключением содержимого тега <title>). Мета-теги могут содержать описание html-страницы, ключевые слова к ней, информацию об авторе, управляющие команды для браузера и поисковых роботов, а также прочую служебную информацию, не предназначенную для посетителей. <s>",
      "Мета-теги для сайта играют очень важную роль. Их добавление в html-документ могут существенно помочь сайту в его жизни.",
      "Мета-теги можно разделить на две основные группы — это NAME и HTTP-EQUIV. Группа NAME отвечает за текстовую информацию о веб-документе, его авторе, а также — формирует рекомендации для поисковых роботов. Мета-теги, относящиеся к группе HTTP-EQUIV фактически эквивалентны гипертекстовым заголовкам, они формируют заголовок веб-страницы и определяют его обработку, а также управляют действиями браузеров и используются для формирования информации, выдаваемой обычными заголовками. Элемент meta принимает следующие атрибуты: content, http-equiv, name, charset и scheme.",
      "На данный момент, во время обучения, я бы не советовал сильно над этим заморачиваться. Просто имейте в виду, что это такое."
    ],

    "Идентификаторы и классы": [
      "Каждый НТМL-элемент может иметь атрибут id. Он предназначен для идентификации какого-либо конкретного тега. В пределах всей HTML-страницы должен существовать только один тег с определенным значением атрибута id. Наличие нескольких элементов с одинаковым значением id не допускается и может привести к ошибке. Значение атрибута id может состоять из букв латинского алфавита, цифр, знака подчеркивания и дефиса. Причем значение атрибута может начинаться с латинской буквы или со знака подчеркивания (но не с цифры или другого символа). Кроме того, значения атрибута id чувствительны к регистру. Атрибут id называют глобальным, поскольку он может быть использован с любыми НТМL-элементами.",
      "Присваивание id элементу:",
      "img/1/1.12.jpg big",
      "Классы используются для классификации элементов по общим группам, поэтому в отличие от атрибута id, множеству элементов может быть присвоено общее имя класса. Присваивая элементам имя одного класса, вы можете применить стили ко всем таким элементам одновременно с помощью единственного правила стилей. Чтобы сделать это, следует воспользоваться атрибутом class. Его значение должно описывать, к какому классу принадлежит элемент.",
      "Присваивание класса элементу:",
      "img/1/1.13.jpg big",
      "Если после прочтения данного раздела вам все еще не понятно зачем это и как использовать, то не расстраивайтесь. Гораздо проще понять, как это работает на практике. У вас будет такая возможность, когда мы перейдем к css."
    ],

    "Абсолютный и относительный путь": [
      "При разработке сайта часто приходится прописывать пути к файлам, ссылки на документы, страницы. В книгах по компьютерным технологиям можно часто встретить употребление терминов абсолютного и относительного пути к файлам. Часто автор не разъясняет, что означает тот или иной путь. Читатель, соответственно, путается, когда автор в последствии говорит об использовании абсолютного и(или) относительного пути. Допустим, у Вас есть сайт и Вам нужно создать гиперссылку(ссылку) на одну из страниц сайта. Здесь нужно выбрать какой использовать тип пути: относительный или абсолютный.",
      "Когда ссылка представляет из себя полный URL файла или страницы, это и есть абсолютный путь. При этом в адресе должен присутствовать используемый протокол. Например, http://www.uamedwed.com <s>",
      "В основном абсолютный путь используется, тогда, когда нужно сослаться на другой сайт. Иными словами если Вы хотите отправить посетителя на другой сайт, то нужно использовать абсолютный путь. Хотя, такой путь можно использовать и на собственном сайте. Но многие придерживаются того, что ссылки внутри сайта должны быть относительными.",
      "Относительный путь описывает путь к указанному документу относительно текущего. <s>",
      "Относительные пути используются гораздо чаще чем абсолютные пути. В основном относительный путь указывается тогда, когда Вам нужно отправить посетителя на другую страницу Вашего сайта, или вставить объект (например изображение) на одной из страниц. При этом использование относительно пути вполне оправдано.",
      "Именно путь относительно документа используется чаще всего. Такие ссылки ещё называются локальными. В основном такой путь используется тогда, когда текущий и связанный документ(страница) находятся в одной директории. Если переместить документ в другую директорию, то путь(ссылку) придётся менять. Хотя можно ссылаться и на документы(страницы) из других директорий. Для этого путь прописывается от текущего документа до целевого документа(страницы). При этом путь относительно документа должен задаваться в зависимости от структуры директорий. Возьмём к примеру простейшую структуру статического сайта.",
      "img/1/1.14.jpg small",
      "Предположим, что каждое изображение в каталоге images нужно вставить в соответствующие страницы home.html, products.html, contact.html. Для того что бы вставить изображение к примеру на страницу «home.html», нужно прописать путь, где расположено изображение. Если использовать путь относительно документа, то нужно будет прописать в коде страницы следующее:",
      "<img src='images/home.png'>",
      "Представим ситуацию, когда страница products.html, будет располагаться не в корневой директории сайта(как это было в предыдущем примере), а в подкаталоге. Теперь необходимо вставить изображение, в файл products.html, который находится, глубже чем корневая директория сайта.",
      "img/1/1.15.jpg small",
      "Для того, что бы вставить изображение в файл products.html нужно вернуться в корневую директорию. После чего, можно использовать уже известный путь, о котором говорилось чуть выше.",
      "<img src='../images/products.png'>",
      "Как видно из приведённого выше кода, к пути теперь добавилось следующее: ../. Как раз эта последовательность символов ../ и служит для перехода на одну директорию(уровень) выше в иерархии каталогов. Путь в вышеприведённом коде можно прочесть так: «Перейти на один каталог выше(назад), зайти в директорию images и взять от туда файл products.png«."
    ],

    "Итог": [
      "И так на данный момент мы знаем основные теги для создания базовых элементов страницы. Так же мы знаем структуру html документа. Еще мы примерно представляем себе, что такое мета теги, блочные элементы, идентификаторы и классы. Это далеко не все что можно знать об html, но этого определенно хватит для создания своей первой страницы, которую позже можно будет застилизовать в css. То есть не стоит забывать, что html это лишь часть веб разработки, не стоит сильно углублятся в изучение этой технологии, на данном этапе обучения. Сейчас, когда вы новичок, вам нужно изучать 'в ширь' а не 'в глубь'. Вам нужно стремиться к умению сверстать веб сайт по макету, со всеми менюшками, секциями, подвалами и шапками.",
      "Прямо сейчас я крайне рекомендую скачать редактор кода visual studio code. Он бесплатный, мало весит, имеет встроенный Emmet (привыкайте гуглить непонятные слова), в нем довольно просто устанавливать плагины и он имеет поддержку русского языка. ",
      "https://www.youtube.com/watch?v=Y4ezhxE7HPw",
      "После того как вы освоитесь в данной IDE, создайте файл index.html и откройте его в vs code. Нажмите на восклицательный знак, а после на tab. Создайте страницу с заголовком, блоком с текстом и ссылками, а внизу разместите картинку. Не стоит пренебрегать практикой, по большей части это и есть процесс обучения.",
      "А для закрепления теоретических знаний, предлагаю вам пройти тест, после которого можно приступить к следующему этапу, к css. "
    ],

    "html <test>": {
      "qsn1": {
        "qsn": "1. Как оформляется комментарий в HTML?",
        "ask": [
          "<!—комментарий --> <s>",
          " /* комментарий */",
          "// комментарий",
          "в html нельзя ставить комментарии"
        ]
      },
      "qsn2": {
        "qsn": "2. С помощью какого тега в HTML создаются ссылки?",
        "ask": ["<p>", "<i>", "<b>", "<a> <s>"]
      },
      "qsn3": {
        "qsn": "3. Каким является следующий адрес ссылки: ../page2.html",
        "ask": ["Абсолютным", "Относительным <s>"]
      },
      "qsn4": {
        "qsn": "4. Каким является следующий адрес ссылки: pages/page2.html        ",
        "ask": ["Абсолютным", "Относительным <s>"]
      },
      "qsn5": {
        "qsn": "5. Как сделать картинку ссылкой?",
        "ask": [
          "<img href='https://webshake.ru/html-training-course' src='promo.png'>",
          "<a href='https://webshake.ru/html-training-course'><img src='promo.png'></a> <s>",
          "<img link='https://webshake.ru/html-training-course' src='promo.png'>"
        ]
      },
      "qsn6": {
        "qsn": "6. С помощью какого тега следует разделять абзацы?",
        "ask": ["<p> <s>", "<br>", "<span>", "<b>"]
      },
      "qsn7": {
        "qsn": "7. Каких тегов в HTML не существует?",
        "ask": ["Парных", "Одиночных", "Тройных <s>"]
      },
      "qsn8": {
        "qsn": "8. Какой тег при создании страницы не является обязательным?",
        "ask": ["body", "strong <s>", "doctype", "head"]
      },
      "qsn9": {
        "qsn": "9. Какой тег отвечает за создание элемента картинки",
        "ask": ["<image>", "<img> <s>", "<picture>"]
      },
      "qsn10": {
        "qsn": "10. Что не находиться в теге head",
        "ask": ["<meta>", "<title>", "<rtag> <s>"]
      }
    }
  },
  "Css": {
    "icon": "img/icon/html.png",
    "Предисловие": [
      "Веб(web) - это одна из сфер программирования, которая очень быстро развивается, и безостановочно растет во все стороны. Уже сейчас возможно написать программу для windows, линукс, mac и даже андроид устройств, пользуясь инструментами веба. Кстати, примером этому факту может послужить программа, в которой вы сейчас находитесь.",
      "img/1/1.1.png",
      "Веб может показаться необъятным. Html, js, css, scss, jQuery, bootstrap и прочих методологии с Фреймворками и библиотеками, не говоря уже о паттернах программирования, работе с сервером и базой данных. Видя такие слова можно потерять веру в свою обучаемость и просто сдаться. Но не стоит забывать, что тяжело только по началу. Все переплетено, и понимая одну технологию можно догадаться как с ней работает другая. Как в пазле, легче его заканчивать, нежели начинать собирать.",
      "И все же необходимо четко делить сайт на 2 мира, что работают чаще всего вместе, но могут разрабатывается отдельно друг от друга. Это frontend и backend. Frontend это то, что по итогу видит пользователь: странички, интерфейс, анимации и т. д. То есть, это все что касается оформления сайта. Backend это то, что делает сайт за кулисами: отправка данных, поддержка сервера, обработка запросов и т. п. Фронт (frontend) гораздо проще для понимания, ведь это по сути визуал, который все мы уже видели и щупали на любых сайтах.",
      "И так давайте упростим задачу, с изучения полного цикла создания сложных сайтов, до создания небольшой странички 'визитки'. То есть только фронт. Для этого познакомимся с 3 китами веба: html, css и javascript. Эти технологии есть на всех сегодняшних сайтах и являются необходимой базой для создания самои простой веб странички. "
    ]
  }
}
